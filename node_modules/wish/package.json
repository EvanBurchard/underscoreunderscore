{
  "name": "wish",
  "description": "Assertions without special syntax",
  "version": "0.0.6",
  "devDependencies": {
    "mocha": "~1.8.2"
  },
  "scripts": {
    "test": "make test"
  },
  "license": "MIT",
  "readmeFilename": "README.md",
  "main": "index.js",
  "directories": {
    "doc": "docs",
    "test": "test"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/EvanBurchard/wish.git"
  },
  "keywords": [
    "asset",
    "test",
    "assertion"
  ],
  "author": {
    "name": "evanburchard"
  },
  "email": "evan.burchard@gmail.com",
  "readme": "Do you ever forget whether your assertion library syntax is \"5.should eq(5)\" or \"should.equal(5, 5)\" or \"5.should.strictEqual(5)\" or \"should.be.ok(5, 5)\"? \n\nI do. All the damn time.  _Wish_ lets you test code, not your memory of ever changing matcher syntax that varies from testing library to testing library.  \n\n## Basic Usage\nWish assertions look like this:\n    wish(5 == 5);\n\nNo need to learn a new syntax in order to write assertions.\n\nWish takes one parameter: a JavaScript expression that will return true or false.  If it fails, the exception will be passed on to the testing framework.  If it passes, it will return true and no exception will be thrown.\n\n## Without external testing framework\nYou don't need a test framework like mocha to get benefit from wishing.  You can see if things are going wrong in your application by checking with a simple statement to make sure that the variable you are not sure about equals 5:\n\n    wish(variable_I_am_not_sure_about === 5);\n\nUsed this way, it's like console.assert, but with better error messages.  \n\n## With Testing Framework (Mocha)\nHere are some of the ways that you could use wish using mocha as an example.  Keep in mind that any test framework that fails tests when an error is thrown (all of them?) will work.\n\n    suite('client tests', function(){\n      test(\"all of these should be true\", function(){\n        wish(5 == 5);\n      });\n    });\n        \n## Supported Assertions\nAny normal JavaScript should work inside of a wish statement.  For example, these will all pass  \n\n    //simple checks\n    wish(5 == 5);\n    wish(4 === 4);\n    wish(3 < 4);\n    wish(9 >= 4);\n    wish(9 > 8);\n\n    //with variables\n    var x = 2;\n    wish(x != 8);\n\n    //with function called ahead of time\n    var y = function(){return 2};\n    wish(y() <= 4);\n\n    //with immediately executing functions\n    wish((function(){ return 4 })()!== 3);\n\n    //arrays objects, and functions will not throw an error, even if they are empty\n    wish([]);\n    wish({});\n    wish(function(){});\n\n    //any string with a length greater than 0 is also truthy, so these pass:\n    wish(\"hello\");\n    wish(\"hi\");\n    wish(\"h\");\n\n    //Infinity and non-zero numbers are also truthy \n    wish(Infinity);\n    wish(433);\n    wish(4.33);\n\n    //You can also use !! syntax\n    wish(!![]);\n    wish(!!{});\n    wish(!!function(){});\n    wish(!!(9 >= 4));\n    wish(!!Infinity);\n    wish(!!433);\n    wish(!!4.33);\n\nThese will throw an error, because the values returned are falsy.  Their error messages will display the expression passed in.\n\n    wish(null);\n    wish(undefined);\n    wish('');\n    wish(\"\");\n    wish(NaN);\n    wish(0);\n    wish(false);\n    wish(!!0);\n    wish(!!false);\n    wish(!true);\n\nThese will throw an error, because they are damned lies.  Their error messages will display the expression with an expectation in a human readable format.  \n\n    wish(3 == 5);\n    wish(9 === 4);\n    wish(100 < 4);\n    wish(0 >= 4);\n    wish(4 != 4);\n\n\n## Contributing\nPull requests and comments are welcome.  \n\nNote: There is a bit of extra complexity that comes with having wish test itself.  The wish(wish(something) == something) meta assertions do not yet have fantastic errors along with their failures.  To keep things simple and avoid a more complex code parsing system, this is not a priority.  \n\n## Roadmap\n- Support for client-side assertions.\n- In order to provide more detailed error messages, esprima should be used to split out the expression into an AST.\n\n## Considerations and Limitations\nAlthough tests will still pass/fail appropriately, in order to see good error messages, wish statements should be on one line.  Arguably, you shouldn't have assertions that take up multiple lines anyways.\n\nThere are a lot of fancy tests that other assertion libraries perform.  All assertions inside of wish are just code, so if you want to test existence, if something will throw an error, or some other higher level idea, you will have to use one of those libraries, or write the functions to check for those yourself.  \n\n## Thanks \n\nI hope you get some value out of wish.  If you want to get in touch outside of github, you can email me at myfirstname.mylastname+wish@gmail.com.\n\nBig thanks to khoomeister for his contributions of better modularity and alternative error messages (check out the wishe.js and get-expression.js files).\n\nCheers,\n\n-Evan\n\n",
  "_id": "wish@0.0.6",
  "_from": "wish@~0.0.6"
}
